{"version":3,"sources":["components/MyNavbar.js","components/Home.js","components/ContentArea.js","App.js","serviceWorker.js","index.js"],"names":["MyNavbar","props","react_default","a","createElement","Fragment","className","style","backgroundColor","width","href","color","tabIndex","role","data-toggle","data-trigger","title","data-content","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","printState","console","log","state","clearState","chooseShow","e","name","target","show","shows","find","obj","shortName","showName","setState","chooseEpisode","season","Math","floor","random","episodes","length","eps","episode","count","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","err","return","showTotal","testButton","searchHandler","search","findShowsByQuery","suggestion","id","collection","randoSeason","randoEpisode","poster","totalEps","encodeURI","fetch","concat","then","res","json","hits","JSON","parse","results","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","i","poster_path","first_air_date","year","substring","searchHits","catch","getShowDetails","showID","something","chooseRando","rando","clickJ00rShow","clickYourShow","what","sth","showDetails","body","tempSuggestion","seasons","toLowerCase","includes","slice","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","episode_count","parseInt","bind","assertThisInitialized","_this2","components_MyNavbar","minHeight","border","borderRadius","maxWidth","src","alt","verticalAlign","fontSize","type","placeholder","onChange","onClick","map","key","height","lineHeight","origin_country","vote_average","vote_count","React","Component","ContentArea","components_Home","App","BrowserRouter","components_ContentArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.85d9484e.chunk.js","sourcesContent":["import React from \"react\";\n\nconst MyNavbar = (props) => {\n\n    return (<React.Fragment>\n\n        {/*<nav className=\"navbar navbar-expand-xs navbar-light container-fluid fixed-top\" style={myNav}>*/}\n        <div className=\"container-fluid fixed-top py-1\" style={{backgroundColor: 'pink', width: '100%'}}>\n            <a href=\"#\" className=\"text-left d-inline-block mr-auto\" style={{color: 'white'}}>\n                <h3 className=\"font-weight-bold mb-0\">Show Shuffle</h3>\n                <p className=\"my-0\">back to Top</p>\n            </a>\n            <a tabIndex=\"0\" className=\"float-right btn btn-sm btn-outline-light d-inline-block mt-3\" role=\"button\" data-toggle=\"popover\" data-trigger=\"focus\" title=\"just pick a dang show already\" data-content=\"don't waste brainpower or time figuring out what to watch. we can guide u in 3 simple steps or suggest a complete rando -- up to you.\">?</a>\n        </div>\n        {/*</nav>*/}\n\n    </React.Fragment>);\n};\n\nexport default MyNavbar;","import React from 'react';\n\nimport MyNavbar from './MyNavbar';\n// import PopularShows from './PopularShows';\n\n\nclass Home extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            suggestion: {\n                id: null,\n                collection: null,\n                name: null,\n                randoSeason: null,\n                randoEpisode: null,\n                poster: null,\n                totalEps: null,\n            },\n            search: '',\n            searchHits: null,\n            // show: null,\n            shows: [\n                {name: 'Futurama', id: '615'},\n                {name: 'The Office', id: '2316'},\n                {name: 'Parks And Rec', id: '8592'},\n                {name: 'King of The Hill', id: '2122'},\n                {name: 'Venture Bros', id: '2418'},\n                {name: 'The Wire', id: '1438'},\n                {name: 'South Park', id: '2190'},\n                {name: 'Breaking Bad', id: '1396'},\n                {name: 'The Sopranos', id: '1398'},\n                {name: 'Seinfeld', id: '1400'},\n                {name: 'Brooklyn Nine Nine', id: '48891'},\n                {name: 'Peaky Blinders', id: '60574'},\n            ],\n        };\n        //declare methods here\n        // this.printState = this.printState.bind(this);\n        this.clearState = this.clearState.bind(this);\n        this.chooseShow = this.chooseShow.bind(this);\n        this.testButton = this.testButton.bind(this);\n        this.searchHandler = this.searchHandler.bind(this);\n        this.findShowsByQuery = this.findShowsByQuery.bind(this);\n        this.getShowDetails = this.getShowDetails.bind(this);\n        this.chooseRando = this.chooseRando.bind(this);\n        this.clickYourShow = this.clickYourShow.bind(this);\n        this.clickJ00rShow = this.clickJ00rShow.bind(this);\n    }\n\n    componentDidMount() {\n        // onInit\n    }\n\n    printState = () => console.log('*** Home.state ***', this.state);\n\n    clearState = () => {\n        // this.setState({show: null});\n        // this.setState({showName: null});\n        // this.setState({season: null});\n        // this.setState({episode: null});\n    };\n\n    chooseShow = (e) => {\n        // this.clearState();\n        // @DESC eventHandler when user clicks a show/button;\n        const name = e.target.name;\n        const show = this.state.shows.find(obj => obj.shortName === name);\n        const showName = show.name;\n\n        this.setState({show: show});\n        this.setState({showName: showName});\n\n        this.chooseEpisode(show);\n    };\n\n    chooseEpisode = (show) => {\n        // @DESC -- make sure whichever function calls this function also calls this.clearState prior to...\n        // @DESC this is a callback function. picks a random season, episode for given show && this.setState;\n        console.log('*** starting chooseEpisode() ***');\n\n        // pick a season at random\n        const season = Math.floor(Math.random() * show.episodes.length) + 1;\n        this.setState({season: season});\n\n        // from that season, pick a random episode\n        const eps = show.episodes[season-1].episodes;\n        const episode = Math.floor(Math.random() * eps) + 1;\n        this.setState({episode: episode});\n\n        // get total episode count for show\n        let count = 0;\n        for (let s of show.episodes) { // in each season of the show (found in show.episodes obj)\n            count += s.episodes; // increase the count by the value of show.episodes[i].episodes\n        }\n        this.setState({showTotal: count});\n    };\n\n    testButton = () => {\n        console.log('*** start testButton() ***');\n    };\n\n    searchHandler = (e) => {\n        const search = e.target.value;\n        this.setState({search: search});\n    };\n\n    findShowsByQuery = () => {\n        const blankSuggestion = {\n            id: null,\n                collection: null,\n                name: null,\n                randoSeason: null,\n                randoEpisode: null,\n                poster: null,\n                totalEps: null,\n        };\n        this.setState({suggestion: blankSuggestion});\n\n\n        const search = encodeURI(this.state.search);\n        console.log('*** starting findShow() ***', search);\n        fetch(`/search/${search}`)\n            .then(res => res.json())\n            .then(hits => {\n                const temp = JSON.parse(hits);\n                const shows = temp.results;\n                // console.log(shows);\n                for (let i of shows) {\n                    if (i.poster_path) {\n                        i.poster_path = 'https://image.tmdb.org/t/p/original' + i.poster_path;\n                    }\n                    if (i.first_air_date) {\n                        i.year = i.first_air_date.substring(0,4)\n                    }\n                }\n                this.setState({searchHits: shows});\n            })\n            .catch(err => console.log(err));\n    };\n\n    getShowDetails = (showID) => {\n        // make a call to the backend that calls the movie dbase api;\n        console.log('*** search() testing backend ***', showID);\n        fetch('/sample')\n            .then(res => res.json())\n            .then(something => console.log(something))\n            .catch(err => console.log(err));\n    };\n\n    chooseRando = () => {\n        console.log('*** starting chooseRando() ***');\n        // this.clearState();\n\n        const rando = Math.floor(Math.random() * this.state.shows.length) + 1;\n        const showID = this.state.shows[rando].id;\n        // const show = this.state.shows[rando];\n        // const showName = show.name;\n        this.clickJ00rShow(showID);\n        // this.setState({show: show});\n        // this.setState({showName: showName});\n\n        // this.chooseEpisode(show);\n    };\n\n    clickYourShow = (e) => {\n        const what = e.target.name;\n        console.log('*** clickYourShow() ***', what);\n    };\n\n    clickJ00rShow = (showID) => {\n        console.log('*** clickJ00rShow() ***', showID);\n        // this.getShowDetails(showID);\n        fetch(`/show/${showID}`)\n            .then(res => res.json())\n            .then(sth => {\n                const showDetails = JSON.parse(sth.body);\n                console.log(showDetails);\n\n\n                // THIS.STATE\n                // suggestion: {\n                //     x id: null,\n                //     x collection: null,\n                //     x name: null,\n                //     randoSeason: null,\n                //     randoEpisode: null,\n                //     x poster: null,\n                //     x totalEps: null,\n                // },\n\n                // id, name\n                let tempSuggestion = {\n                    id: showDetails.id,\n                    name: showDetails.name,\n                };\n\n                // collection\n                showDetails.seasons[0].name.toLowerCase().includes('special') ? tempSuggestion.collection = showDetails.seasons.slice(1) : tempSuggestion.collection = showDetails.seasons;\n\n                // poster\n                if (showDetails.poster_path) {\n                    tempSuggestion.poster = 'https://image.tmdb.org/t/p/original' + showDetails.poster_path;\n                }\n\n                // total eps\n                let count = 0;\n                for (let season of tempSuggestion.collection) {\n                    season.episode_count = parseInt(season.episode_count);\n                    count += season.episode_count;\n                    // console.log(count);\n                }\n                // console.log('final count', count);\n                tempSuggestion.totalEps = count;\n\n                // randoSeason\n                tempSuggestion.randoSeason = Math.floor(Math.random() * tempSuggestion.collection.length) + 1;\n\n                // randoEpisode\n                tempSuggestion.randoEpisode = Math.floor(Math.random() * tempSuggestion.collection[tempSuggestion.randoSeason-1].episode_count);\n\n                //\n                // // set name\n                // if (showDetails.name) {\n                //     this.setState({showName: showDetails.name});\n                // }\n                //\n                // // rando pick season\n                // const randoSeason = Math.floor(Math.random() * showDetailsSeasons.length) + 1;\n                // this.setState({showSeason: randoSeason});\n                //\n                // // rando pic episode from that season\n                // const randoEpisode = Math.floor(Math.random() * showDetailsSeasons[randoSeason-1].episode_count);\n                // this.setState({showEpisode: randoEpisode});\n\n\n\n                console.log('*** tempSuggestion ***', tempSuggestion);\n                this.setState({suggestion: tempSuggestion});\n            })\n            .catch(err => console.log(err));\n    };\n\n    render() {\n\n        const recommendation = {\n            border: '5px solid black',\n            borderRadius: '8px',\n            width: '95%',\n            maxWidth: '600px'\n            // margin: '0 auto',\n            // padding: '20px',\n            // height: '250px',\n            // width: '385px',\n            // padding: 'auto',\n        };\n        const small = {fontSize: 'small'};\n        // const header = {marginBottom: '150px'};\n        // const medium = {};\n        // const whoa = {};\n\n        return(<React.Fragment>\n            <div className=\"\">\n\n                {/*<div className=\"my-background\">*/}\n\n                <a name=\"recommendation\"></a>\n                {/*<button className=\"btn btn-sm btn-primary\" onClick={this.printState}>print state</button>*/}\n\n\n                {/* navbar */}\n                <MyNavbar />\n\n                {/* content */}\n                <div className=\"container-fluid  text-center\">\n\n                    {/* spacer */}\n                    <div className=\"d-block mb-5 text-left\" style={{minHeight: '200px'}}>\n                        {/*<button className=\"btn btn-sm btn-primary d-inline-block mr-3\" onClick={this.testButton}>Test Button 1</button>*/}\n                        {/*<button className=\"btn btn-sm btn-primary d-inline-block mr-3\" onClick={this.printState}>Print State</button>*/}\n                    </div>\n\n\n\n                    {/* the recommendation */}\n                    {/*{this.state.showName && this.state.showSeason && this.state.showEpisode && this.state.showPoster &&*/}\n                    {this.state.suggestion.id &&\n                    <div className=\"row my-4 mx-auto btn-light\" style={recommendation}>\n\n                        <div className=\"col-6\">\n                            <img src={this.state.suggestion.poster} alt={this.state.suggestion.name} className=\"mt-2\" style={{width: '95%', maxWidth: '500px'}} />\n                        </div>\n\n                        <div className=\"col-6 mt-2 d-flex-column\">\n                            <h3 className=\"mx-auto p-auto\" style={{verticalAlign: 'middle'}}>\n                                You chose<br />\n                                <span className=\"font-weight-bold\"><u>{this.state.suggestion.name}</u></span><br />\n                                <span style={small} className=\"\">({this.state.suggestion.totalEps} total eps)</span><br />&nbsp;<br />\n                                <span className=\"font-weight-bold\"><u>Season {this.state.suggestion.randoSeason} Episode {this.state.suggestion.randoEpisode}</u></span>\n                            </h3>\n                        </div>\n\n                    </div>\n                    }\n                    {/* end recommendation */}\n\n\n\n\n\n\n\n                    {/* search */}\n                    <div className=\"py-4\" style={{border: '2px solid white', borderRadius: '5px'}}>\n                        <input type=\"text\" name=\"search\" style={{width: '65%'}} placeholder=\"search for show\" onChange={this.searchHandler} /><button className=\"btn btn-sm btn-success ml-3\" onClick={this.findShowsByQuery}>Search</button>\n\n                        <button className=\"btn btn-sm btn-primary d-block mt-3 mx-auto\" style={{width: '200px'}} onClick={this.chooseRando}>Gimme a Rando</button>\n                    </div>\n                    {/* end search */}\n\n\n\n\n                    {/* search results */}\n                    {this.state.searchHits &&\n                    <div className=\"container-fluid\" style={{}}>\n                        <p style={{backgroundColor: 'white'}}>click your show</p>\n\n                        {this.state.searchHits.map(show => {\n\n                            return(<React.Fragment>\n\n                                {/*backdrop_path: \"/5isj5gcGT0RrJ7uMO5pnd0AXXC.jpg\"*/}\n                                {/*first_air_date: \"2005-03-24\"*/}\n                                {/*genre_ids: [35]*/}\n                                {/*id: 2316*/}\n                                {/*name: \"The Office\"*/}\n                                {/*origin_country: [\"US\"]*/}\n                                {/*original_language: \"en\"*/}\n                                {/*original_name: \"The Office\"*/}\n                                {/*overview: \"The everyday lives of office employees in the Scranton, Pennsylvania branch of the fictional Dunder Mifflin Paper Company.\"*/}\n                                {/*popularity: 21.503*/}\n                                {/*poster_path: \"/qWnJzyZhyy74gjpSjIXWmuk0ifX.jpg\"*/}\n                                {/*vote_average: 8.05*/}\n                                {/*vote_count: 499*/}\n\n                                {show.poster_path && show.year && show.id &&\n                                    <a key={show.id} href=\"#\" className=\"col-12 col-md-3 mb-5 text-center d-inline-block\" style={{verticalAlign: 'top'}} onClick={() => this.clickJ00rShow(show.id)}>\n                                        {/*<div className=\"col-12 col-md-2 btn-light d-inline-block text-center my-1 mx-auto mx-md-3 p-1\" style={{border: '1px solid black', verticalAlign: 'top'}}>*/}\n                                            <img src={show.poster_path} alt={show.name} className=\"mb-2\" style={{width: '75%', maxWidth: '200px', height: 'auto'}}/>\n                                            <p className=\"\" style={{color: 'white', lineHeight: '15px'}}>\n                                                <span style={{fontSize: 'x-large'}} className=\"font-weight-bold\">{show.name}</span><br />\n                                                {show.year} ({show.origin_country})<br />\n                                                <span className=\"font-weight-bold\">{show.vote_average}</span> / {show.vote_count} votes\n                                            </p>\n\n\n                                            {/*<h3 className=\"\" style={{fontSize: 'x-large'}} name={show.id}>{show.name}</h3>*/}\n                                            {/*<p name={show.id}>*/}\n                                                {/*First Air Date: {show.first_air_date}, [{show.origin_country}]*/}\n                                                {/*<br /><span className=\"font-weight-bold\">{show.vote_average}</span> (total votes: {show.vote_count})*/}\n                                            {/*</p>*/}\n                                        {/*</div>*/}\n                                    </a>\n                                }\n\n                            </React.Fragment>);\n                        })}\n\n\n                    </div>\n                    }\n\n\n                    {/* end search results*/}\n\n\n\n\n\n\n\n                    {/* popular shows */}\n                    {this.state.shows &&\n                        <div className=\"container-fluid row my-2 mx-auto d-flex align-items-center\" style={{}}>\n\n                            {this.state.shows.map(show => {\n                                return (\n                                    <React.Fragment>\n\n                                        {/* mobile view */}\n                                        {/*<div className=\"d-flex-column d-sm-none col-4 container\">*/}\n                                            {/*<a href=\"#\"*/}\n                                               {/*role=\"button\"*/}\n                                               {/*name={show.shortName}*/}\n                                               {/*className=\"btn btn-sm mx-auto my-4 py-auto d-block align-self-center font-weight-bold\"*/}\n                                               {/*style={{maxHeight: '70px', minHeight: '40px', width: '100px', backgroundColor: 'pink', color: 'white'}}*/}\n                                               {/*onClick={this.chooseShow}>*/}\n                                                {/*{show.name}*/}\n                                            {/*</a>*/}\n                                        {/*</div>*/}\n\n                                        <div key={show.id} className=\"d-flex-column d-sm-none col-6 container\" name={show.id}>\n                                            <a href=\"#\"\n                                               role=\"button\"\n                                               className=\"mx-auto my-4 d-block align-self-center\"\n                                               style={{color: \"pink\"}}\n                                               onClick={() => {this.clickJ00rShow(show.id)}}>\n                                                <span className=\"pop-show font-weight-bold\" style={{fontSize: 'x-large'}}>{show.name}</span>\n                                            </a>\n                                        </div>\n\n\n\n                                        {/* desktop view */}\n                                        <div className=\"d-none d-sm-inline-block col-4\">\n                                            <a href=\"#\"\n                                               role=\"button\"\n                                               name={show.name}\n                                               className=\"mx-auto my-4 d-block pop-show\"\n                                               style={{color: 'pink'}}\n                                               onClick={() => this.clickJ00rShow(show.id)}>\n                                                <h1>{show.name}</h1>\n                                            </a>\n                                        </div>\n                                    </React.Fragment>\n                                );\n                            })}\n                        </div>\n                    }\n                    {/* end popular shows */}\n                </div>\n                {/* end content > .my-background */}\n\n                {/*</div>*/}\n            </div>\n        </React.Fragment>);\n    }\n\n\n\n}\n\n\nexport default Home;","import React from 'react';\nimport Home from './Home';\n\nclass ContentArea extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            // key: value,\n        };\n        //declare methods here\n\n    }\n\n    componentDidMount() {\n        // onInit\n    }\n\n    render() {\n\n        return(\n            <React.Fragment>\n                <div className=\"root-div my-background\">\n\n                    <Home/>\n\n                </div>\n            </React.Fragment>\n        );\n    }\n\n\n\n}\n\n\nexport default ContentArea;","import React, { Component } from 'react';\nimport './App.css';\n\nimport { BrowserRouter } from 'react-router-dom';\nimport ContentArea from './components/ContentArea';\n\nclass App extends Component {\n    render() {\n        return (\n            <BrowserRouter>\n                <React.Fragment>\n                    <ContentArea />\n                </React.Fragment>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}